.defer :main
.defer :exit

.frame :start
{
  .invoke :main @0 ;
  .invoke :exit @0 ;
}

.frame :exit
{
  .trap 1 ;
}

.frame :read
{
  .trap 2 ;
  .return @0
}

.frame :emit %n!
{
  . , %n ;
  .trap 3 ;
  .return @0
}

.frame :count_to_n %n!
{
  .scope :_ 0=r = %i! ;
  {
    .while :loop SP , %n - %i ;
    {
      . , %i +1 = %i ;
      .invoke :emit @1 ;
    }
    .return @0
  }
}

.frame :count_to_n_efficient %n!
{
  .scope :_ 0=r = %i! ;
  {
    .while :loop NP , %i +1 = %i - %n ;
    {
      .invoke :emit @1 ;
    }
    .return @0
  }
}

.const :COUNT_TO 10

.frame :main
{
  .scope :_ :COUNT_TO = %n! ;
  {
    .invoke :count_to_n @1 ;
    .return @0
  }
}
